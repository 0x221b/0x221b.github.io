<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/author/0x221B/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2020-09-18T20:04:44+01:00</updated>
  <id>http://localhost:4000/author/0x221B/feed.xml</id>

  
  
  

  
    <title type="html">Hacker Street | </title>
  

  
    <subtitle></subtitle>
  

  

  
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">SSRF - Location and Exploitation</title>
      <link href="http://localhost:4000/SSRF" rel="alternate" type="text/html" title="SSRF - Location and Exploitation" />
      <published>2020-08-06T00:00:00+01:00</published>
      <updated>2020-08-06T00:00:00+01:00</updated>
      <id>http://localhost:4000/SSRF</id>
      <content type="html" xml:base="http://localhost:4000/SSRF">&lt;p&gt;Server Side Request Forgery (SSRF) is an exploit that allows an attacker to make arbitrary HTTP requests from the web server. These could be to access an internal network or to reach out to a malicious site, essentially turning the web server into a proxy server.&lt;/p&gt;

&lt;h2&gt;How to find SSRF&lt;/h2&gt;

&lt;p&gt;SSRF’s should be checked for in any url parameters that contain any links or domain names especially FQDNs, in a similar way to Open Redirects.&lt;/p&gt;

&lt;h2&gt;Types of SSRF&lt;/h2&gt;

&lt;h3&gt;Against the server itself&lt;/h3&gt;

&lt;p&gt;In this case an SSRF is exploited to read web pages on the server that would normally be forbidden. This works as the HTTP request comes from the web server rather than the client. The image below is taken from the Portswigger Web Academy labs and shows a request to the server itself to access the previously blocked page /admin. The original API address in the data of the POST request has been replaced with a request to the admin page on the local host.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/ssrf-self.png&quot; alt=&quot;SSRF on self example&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;SSRF to Internal Private Network&lt;/h3&gt;

&lt;p&gt;As you are able to control the HTTP requests of the web server that means you able to access any private networks it is connected to and can therefore reach any back end servers that have HTTP access.&lt;/p&gt;

&lt;p&gt;The image below shows burp intruder scanning through the private network via SSRF in order to locate any other hosts that are up.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/SSRF-scan.png&quot; alt=&quot;SSRF scan&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As well as finding open hosts on the network a similar effect can be achieved looking for open ports on those hosts. Simply add the port number to the burp intruder scan and look for some common HTTP ports on any open hosts you find.&lt;/p&gt;

&lt;h3&gt;Blind SSRF&lt;/h3&gt;

&lt;p&gt;Like other blind attacks a blind SSRF is one that provides no obvious feedback in the HTTP response. An example of this would be an SSRF in the Referer header that could be accessed at a later date by the system logging where sites are referred from. This does limit you to connecting to your own malicious site rather then other systems on the network so is generally not as serious but can still cause issues depending on what you hot on your site.&lt;/p&gt;

&lt;h2&gt;SSRF By Other Means&lt;/h2&gt;

&lt;h3&gt;SSRF Through XXE&lt;/h3&gt;

&lt;p&gt;One of the main way to exploit XXE is by embedding an SSRF in it. For more details on this see my previous post on &lt;a href=&quot;https://0x221b.github.io/OWASP-Top-10-XXE&quot;&gt;XXE&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;SSRF Through Open Redirect&lt;/h3&gt;

&lt;p&gt;One way to exploit an SSRF is via an Open Redirect vulnerability, where instead of pointing it at an external resource you point it at an internal one the same as an SSRF.&lt;/p&gt;

&lt;h2&gt;Bypassing Filters&lt;/h2&gt;

&lt;h3&gt;Blacklisting Bypass&lt;/h3&gt;

&lt;p&gt;A blacklist on the site will block certain strnigs or chars. I have a list on my &lt;a href=&quot;https://github.com/0x221b/Wordlists/blob/master/Attacks/SSRF/Blacklist-bypass.txt&quot;&gt;GitHub&lt;/a&gt; where I have a list of possible bypasses to try in order to reach the local host but obviously these can be adapted to suit whatever it is you are trying to access.&lt;/p&gt;

&lt;h3&gt;Whitelisting Bypass&lt;/h3&gt;

&lt;p&gt;A white list on the other hand will only allow submissions that contain certain strings. The key here is to include the expected domain as well as malicious one. Again on my &lt;a href=&quot;https://github.com/0x221b/Wordlists/blob/master/Attacks/SSRF/Whitelist-bypass.txt&quot;&gt;Github&lt;/a&gt; I have a wordlist to attempt to circumvent these. It is set up for the local host but can be adapted for any. Some will only work if you are pointing it to a site you control.&lt;/p&gt;

&lt;h3&gt;SSRF from XSS&lt;/h3&gt;

&lt;p&gt;@georgeomnet posted an example of how to escalate an XSS to SSRF on a site if it uses caching:&lt;/p&gt;

&lt;p&gt;&amp;lt; esi:include src=”http ://site.com/capture” /&amp;gt;&lt;/p&gt;

&lt;h2&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;As with all of these types of techniques these methods should only be used against systems you own or those you have express and written permission of the owner to test. It is illegal to use these techniques on systems in other cases.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This article has covered the basics of SSRF but like most web vulns there are always new tricks and traps coming out. I will be updating this blog as I discover more info so check back another time.&lt;/p&gt;

&lt;p&gt;Any comments, resource suggestions or questions please contact me on twitter at the link at the top of the page.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;0x221b&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000&quot; data-font-color=&quot;#000&quot; data-coffee-color=&quot;#fff&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/221b.png&quot; alt=&quot;&amp;quot;0x221B&amp;quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>0x221B</name>
        
        
      </author>

      

      
        <category term="Web" />
      

      
        <summary type="html">Server Side Request Forgery (SSRF) is an exploit that allows an attacker to make arbitrary HTTP requests from the web server. These could be to access an internal network or to reach out to a malicious site, essentially turning the web server into a proxy server.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OWASP Top 10 XXE (or taking liberties with acronyms)</title>
      <link href="http://localhost:4000/OWASP-Top-10-XXE" rel="alternate" type="text/html" title="OWASP Top 10 XXE (or taking liberties with acronyms)" />
      <published>2020-08-01T00:00:00+01:00</published>
      <updated>2020-08-01T00:00:00+01:00</updated>
      <id>http://localhost:4000/OWASP-Top-10-XXE</id>
      <content type="html" xml:base="http://localhost:4000/OWASP-Top-10-XXE">&lt;p&gt;As in my article on Command Injection the aim of this post is to consolidate my knowledge on an issue in the OWASP Top 10 and add to it as I learn more so I have a constantly expanding reference guide and hopefully help out anyone who stumbles across this.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Injection&lt;/li&gt;
  &lt;li&gt;Broken Authentication&lt;/li&gt;
  &lt;li&gt;Sensitive Data Exposure&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;XXE&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Broken Access Control&lt;/li&gt;
  &lt;li&gt;Security Misconfiguration&lt;/li&gt;
  &lt;li&gt;XSS&lt;/li&gt;
  &lt;li&gt;Insecure Deserialisation&lt;/li&gt;
  &lt;li&gt;Using Components With Known Vulnerabilities&lt;/li&gt;
  &lt;li&gt;Insufficient Logging and Monitoring&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This post is going to focus on number 4 on the list XML External Entity more commonly known as XXE.&lt;/p&gt;

&lt;h2&gt;XXE&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Impact:&lt;/strong&gt; 8          &lt;strong&gt;Risk:&lt;/strong&gt; 7          &lt;strong&gt;Difficulty:&lt;/strong&gt; 3&lt;/p&gt;

&lt;h3&gt;So what is an XXE?&lt;/h3&gt;

&lt;p&gt;XXE is a little inceptionesque when it comes to naming. XXE stands for XML External Entity but the acronym within the acronym XML stands for Extensible Markup Language. Apart from playing fast and loose with E’s and X’s in acronyms its pretty obvious even to the most technophobic of readers that as it suggests XML is a mark up language.&lt;/p&gt;

&lt;p&gt;XML uses tags like HTML only instead of boring h2s and ps the tags are user defined. Anyway you can all look in wikipedia so i think we have reached the recommended daily dose of what XML does except to say that it is a language that web sites use to structure the information they hold.&lt;/p&gt;

&lt;p&gt;An example of an XML document can be seen below in Figure 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/xml-example.png&quot; alt=&quot;XML example - Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To understand XXE you must first understand Document Type Definition (DTD) files. These define the structure of the XML file. DTD files can be internal or external, that is they can be defined within the XML file or reference one at a given external location.&lt;/p&gt;

&lt;p&gt;DTDs hold entities and the entities can call system commands. And there in lies our vulnerability. This means that by injecting into an XML document you can change what the system call does. For example we can make the XML ask to provide information from the server or connect to our malicious server. Never trust a user. If this all sounds overly complicated the examples below should clear it all up.&lt;/p&gt;

&lt;p&gt;Pre-warning - this article contains spoliers for the Portswigger’s Web Academy’s XXE labs and Hack the Box retired DevOops box.&lt;/p&gt;

&lt;h3&gt;Types of XXE&lt;/h3&gt;

&lt;p&gt;Types of XXE attack are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XXE with LFI&lt;/li&gt;
  &lt;li&gt;XXE with SSRF&lt;/li&gt;
  &lt;li&gt;XXE to exfiltrate data out of band&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To cover each of these we will work through the labs available on PortSwiggers Web Academy.&lt;/p&gt;

&lt;h4&gt;XXE with LFI&lt;/h4&gt;

&lt;p&gt;The Web academy sets up a simple site that uses XML documents to check stock levels. Figure 2 shows the intended request and response in Burp Suite.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/XXE-LFI-req.png&quot; alt=&quot;XXE with LFI intended request - Figure 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 2 shows the altered request and the reponse showing the details of the requested file.&lt;/p&gt;

&lt;p&gt;To come back to explanation of an XXE the external entity is the &amp;amp;xxe that is defined and then called later on in the document and thus injected into the server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/XXE-LFI-exploit.png&quot; alt=&quot;XXE with LFI exploit - Figure 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the addition of the line DOCTYPE line to declare the xxe external entity and then calling it in the product id it responds with the requested file. From there follow the instructions in my &lt;a href=&quot;https://0x221b.github.io/LFI-to-RCE&quot;&gt;LFI&lt;/a&gt; to find interesting files and see if you can escalate.&lt;/p&gt;

&lt;h4&gt;XXE with SSRF&lt;/h4&gt;

&lt;p&gt;This time the same site can be exploited by adding the following http request in place of the file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/XXE-SSRF.png&quot; alt=&quot;XXE with SSRF - Figure 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With this you are able to access another mahcine on the network (SSRF article coming soon) or your own malicious site to extract files from the server if the way above doesnt work.&lt;/p&gt;

&lt;p&gt;If you get no response on the LFI and SSRF it doesn’t always mean it isn’t vulnerable. If you use a canary token or your own web server you can try connecting back (similar syntax as SSRF) to that and see if you can attach a file in the parameters.&lt;/p&gt;

&lt;h4&gt;OOB&lt;/h4&gt;

&lt;p&gt;For this we need to define an external DTD in order for the exploit to work. The first part of the image below is the external DTD that you host on your attacking system and the second part s the request you send to your target.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/OOB.png&quot; alt=&quot;OOB req&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The attack follows the following stages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;POST request with the above body sent to the target server&lt;/li&gt;
  &lt;li&gt;If vulnerable the XML in the requests instructs the server to access the attacker-webserver to request the external DTD which it sends back to the target server&lt;/li&gt;
  &lt;li&gt;GET request with appended requested /etc/passwd file sent to the attacker-webserver which can be found in the logs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These should cause DNS and HTTP requests to your webserver if yo recieve one and not the other further debugging may be required. For example &lt;a href=&quot;https://f4d3.io/xxe_wild/&quot;&gt;this article&lt;/a&gt; which uses a file upload on the site to host a DTD.&lt;/p&gt;

&lt;h4&gt;Error Based&lt;/h4&gt;
&lt;p&gt;As an alternate option if faced with a blind exploit you can attempt to get the sensitive files via a error based response that will send your requested file to your attacking server. Using this method you would request the document you wish to read and then one that does not exist.&lt;/p&gt;

&lt;p&gt;This first image shows the external DTD that you host on your server or upload etc&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/errDTD.png&quot; alt=&quot;Error based DTD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this one is the request to execute it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/errreq.png&quot; alt=&quot;Erro based request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course in some cases the firewalls arent going to allow this and in those cases you can attempt to access a DTD on the webserver already. &lt;a href=&quot;https://github.com/GoSecure/dtd-finder/blob/698fd678f26395e1c7c097525f7182aecad0cd5f/list/xxe_payloads.md&quot;&gt;This article&lt;/a&gt; lists various ways to exploit a target if it has access to a known DTD. An example can be seen below using this method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/localDTD.png&quot; alt=&quot;local DTD exploit&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;How do I find XXE?&lt;/h3&gt;

&lt;p&gt;XXE should be tested anywhere an xml document is submitted. Although the examples below are oversimplified examples in the real world the xml is likely to have a lot of objects and each of them must be tested. On different sites XML can be produced for different reasons. Once your recon of a site is complete check you burp logs for any xml documents being sent to the server and give them a try.&lt;/p&gt;

&lt;p&gt;Keep an eye out for Content-Type: application/xml in requests.&lt;/p&gt;

&lt;p&gt;But everything is JSON these days, well its still possible to convert the JSON to XML and attempt the exploit. Convert with an &lt;a href=&quot;https://www.convertjson.com/json-to-xml.htm&quot;&gt;online tool&lt;/a&gt; and change the content type to the above and it might sneak through. For more details on this, see this great &lt;a href=&quot;https://blog.netspi.com/playing-content-type-xxe-json-endpoints/&quot;&gt;article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another place to look for XXE is in File Uploads. If you cant manage to upload a reverse shell sometimes these file uploads accept XML documents. The example below is from Hack The Box DevOops and shows an LFI being executed through an XML file upload.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/devoops.png&quot; alt=&quot;DevOops example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we know the users on the system and their home directories we can check for SSH keys as seen below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/devoops-ssh.png&quot; alt=&quot;SSH key&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Payloads&lt;/h3&gt;

&lt;p&gt;A list of all the XXE payloads you could possibly want are available on payloads all the things &lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Examples in Hack The Box&lt;/h3&gt;

&lt;p&gt;For those wishing to practice XXE there are example on DVWA and Juice Shop as well as the below retired Hack the Box machines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aragog&lt;/li&gt;
  &lt;li&gt;Fulcrum&lt;/li&gt;
  &lt;li&gt;DevOOPs&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Prevention&lt;/h3&gt;

&lt;p&gt;Disable any unused XML parsing features that could be used by attackers to run XXE in particular resolution of external entities and support for XInclude&lt;/p&gt;

&lt;h3&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;As with all of these types of techniques these methods should only be used against systems you own or those you have express and written permission of the owner to test. It is illegal to use these techniques on systems in other cases.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This has been a brief over view of how to find and exploit XXE. The combination of the Web Academy and Hack the Box should be sufficient to get your head around this topic and then its just a case of expanding this to bigger documents in the wild. Check back from time to time as I will be adding new content to this page and others as I discover more things. XXEs most commonly result in the ability to read files on the system which can potentially be escalated or to connect to internal networks and services or an external malicious host.&lt;/p&gt;

&lt;p&gt;Any comments or questions please contact me on twitter at the link at the top of the page.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;0x221b&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000&quot; data-font-color=&quot;#000&quot; data-coffee-color=&quot;#fff&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/221b.png&quot; alt=&quot;&amp;quot;0x221B&amp;quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>0x221B</name>
        
        
      </author>

      

      
        <category term="OWASP" />
      
        <category term="Web" />
      

      
        <summary type="html">As in my article on Command Injection the aim of this post is to consolidate my knowledge on an issue in the OWASP Top 10 and add to it as I learn more so I have a constantly expanding reference guide and hopefully help out anyone who stumbles across this.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Hacking WebDAV with Granny and Grandpa</title>
      <link href="http://localhost:4000/Webdav-with-Granny-and-Grandpa" rel="alternate" type="text/html" title="Hacking WebDAV with Granny and Grandpa" />
      <published>2020-07-29T00:00:00+01:00</published>
      <updated>2020-07-29T00:00:00+01:00</updated>
      <id>http://localhost:4000/Webdav-with-Granny-and-Grandpa</id>
      <content type="html" xml:base="http://localhost:4000/Webdav-with-Granny-and-Grandpa">&lt;p&gt;Web Distributed Authoring and Versioning (WebDAV) is an extension on HTTP that provides further methods to allow users to control content more readily. Webdav allows authorised users to create, move and alter files on a server. They are used by software that supports publishing of data such as sharepoint and outlook.&lt;/p&gt;

&lt;p&gt;What could possibly go wrong…&lt;/p&gt;

&lt;p&gt;For this article I will be using the retired Hack the Box machines Granny and Grandpa. These boxes are both retired but if you don’t want spoilers on how to do them don’t read any further.&lt;/p&gt;

&lt;h2&gt;Webdav methods&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;SEARCH - Allows searching of webDAV resources&lt;/li&gt;
  &lt;li&gt;PROPFIND - retrieve properties from a resource&lt;/li&gt;
  &lt;li&gt;PROPPATCH - modify properties&lt;/li&gt;
  &lt;li&gt;MKCOL - create collections (directories, think mkdir)&lt;/li&gt;
  &lt;li&gt;COPY - copy a resource&lt;/li&gt;
  &lt;li&gt;MOVE - move a resource&lt;/li&gt;
  &lt;li&gt;LOCK - Locks a resource to prevent editing&lt;/li&gt;
  &lt;li&gt;UNLOCK - unlocks resource&lt;/li&gt;
  &lt;li&gt;CHECKIN - version control&lt;/li&gt;
  &lt;li&gt;CHECKOUT - version control&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Webdav hacking&lt;/h2&gt;

&lt;h3&gt;Discovering WebDav&lt;/h3&gt;

&lt;p&gt;If you are running an Nmap scan of a system with the -sC setting for safe scripts then it will scan for the presence of WebDAV by default. If it finds it you will get an output like in Fig 1.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/webDAV-nmap-sVC.png&quot; alt=&quot;WebDAV Nmap response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 1. Nmap’s WebDAV scan results from GRANNY&lt;/p&gt;

&lt;p&gt;This scan also lists all the methods avialble to us including the additional features of WebDAV. Similar information can be gleaned from a simple OPTIONS request to the web server as shown in Fig 2.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/webDAV-OPTIONS.png&quot; alt=&quot;WebDAV OPTIONS response&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 2. OPTIONS request using BurpSuite showing allowed methods on GRANNY&lt;/p&gt;

&lt;h3&gt;Exploitation&lt;/h3&gt;

&lt;p&gt;Now we have established which methods we can use we know what we have to play with. Lets look at the interesting ones.&lt;/p&gt;

&lt;h4&gt;MOVE&lt;/h4&gt;

&lt;p&gt;The MOVE method is the same as it is on linux (mv) we are able to move a file from one place to another or rename it in place. This is interesting in a similar way to my previous article on LFI, in that if we can somehow get text onto the system that we can access over the web with a file upload etc we can change it from a txt file to a php for example and get code execution.&lt;/p&gt;

&lt;p&gt;This is where the PUT HTTP method comes to help us. If PUT is allowed which would make sense on this kind of server it gets rid of the usual problem with file uploads where you have to bypass various filters on the file extension. With this we can PUT a txt file and MOVE it to create an executable. Then all we have to do is visit the page and we have RCE.&lt;/p&gt;

&lt;p&gt;As with file uploads the first step is to assess which file types we are allowed to upload. This can be achieved with BurpSuite and a file extension list. If you don’t have one I have a list on my &lt;a href=&quot;https://github.com/0x221b/Wordlists/blob/master/Extensions.txt&quot;&gt;GitHub&lt;/a&gt;. Attempt to upload a txt document and then in intruder highlight the file extension and sniper it with my wordlist.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/PUT-extensions.png&quot; alt=&quot;Permitted PUT extensions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 3. Burp Intruder showing permitted extensions on GRANNY&lt;/p&gt;

&lt;p&gt;Now we know we are limited by all the interesting file extensions but thanks to the MOVE command being available we are able to upload a text file containing a web shell etc and then convert it to a .aspx file in order to execute it.
And there we go we have RCE on GRANNY. Not a sentence I thought I would ever say. The process can be seen in more detail in the following images&lt;/p&gt;

&lt;p&gt;This example uses code for an aspx rev shell using the standard kali one but a metasploit one can be made with msfvenom for a full reverse shell&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/PUT-req.png&quot; alt=&quot;PUT request of txt doc&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 4. PUT txt file containing&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/txt-doc.png&quot; alt=&quot;Upload check&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 5. Check the file has uploaded successfully&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/MOVE-req.png&quot; alt=&quot;MOVE request to .aspx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 6. MOVE request to convert txt to aspx&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/aspx-shell.png&quot; alt=&quot;ASPX shell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 7. aspx web shell as nt authority\network service&lt;/p&gt;

&lt;p&gt;A lot of this work can be automated with the davtest tool as can be seen below in Fig 8.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/davtest.png&quot; alt=&quot;davtest tool running against GRANNY&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 8. Davtest tool&lt;/p&gt;

&lt;p&gt;Of course you can also cheat and just use ​iis_webdav_upload_asp Metasploit module instead.&lt;/p&gt;

&lt;h4&gt;PROPFIND&lt;/h4&gt;

&lt;p&gt;CVE-2017-7269 affects the PROPFIND method on certain releases. In Figure 9 below the exploit can be seen being run from Metasploit to get a meterpreter shell.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/PROPFIND.png&quot; alt=&quot;PROPFIND rev shell&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Figure 9. Reverse shell with PROPFIND exploit using Metasploit on GRANNY&lt;/p&gt;

&lt;h3&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;As with all of these types of techniques these methods should only be used against systems you own or those you have express and written permission of the owner to test. It is illegal to use these techniques on systems in other cases.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This article is a quick exploration of what it is possible to do if you find WebDAV running on a web server. Although less likely these days. To help illustrate this we have mainly used the GRANNY machine from Hack the Box. The reason I havent included too much from GRANDPA is because you get basically the same result but all good for practice.&lt;/p&gt;

&lt;p&gt;Any comments or questions please contact me on twitter at the link at the top of the page.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;0x221b&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000&quot; data-font-color=&quot;#000&quot; data-coffee-color=&quot;#fff&quot;&gt;&lt;/script&gt;

&lt;p&gt;I am currently transfering some pages from my old &lt;a href=&quot;https://testofpen.wordpress.com/&quot;&gt;blog&lt;/a&gt;, visit there for more content in the mean time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/221b.png&quot; alt=&quot;&amp;quot;0x221B&amp;quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>0x221B</name>
        
        
      </author>

      

      
        <category term="Networking" />
      
        <category term="HTB" />
      
        <category term="Web" />
      

      
        <summary type="html">Web Distributed Authoring and Versioning (WebDAV) is an extension on HTTP that provides further methods to allow users to control content more readily. Webdav allows authorised users to create, move and alter files on a server. They are used by software that supports publishing of data such as sharepoint and outlook.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Finding, Exploiting and Escalating LFI</title>
      <link href="http://localhost:4000/LFI-to-RCE" rel="alternate" type="text/html" title="Finding, Exploiting and Escalating LFI" />
      <published>2020-07-26T00:00:00+01:00</published>
      <updated>2020-07-26T00:00:00+01:00</updated>
      <id>http://localhost:4000/LFI-to-RCE</id>
      <content type="html" xml:base="http://localhost:4000/LFI-to-RCE">&lt;p&gt;Local File Inclusion or LFI is a vulnerability in web applications where input can be manipulated to read other files on the system that were not intented to be read by the web server. It occurs when the application accesses a file on the system using input that can be altered by the user. Then it is just a case of finding the right level of back tracks (../) to locate the files of interest.
LFI is a useful vulnerability to find but if there are no interesting files on the server there isn’t much you can do with it. Or is there?&lt;/p&gt;

&lt;p&gt;The main reason I do these types of blogs is to get all my knowledge on a subject i can easily access when needed but hopefully they will help others if they get stuck as well.&lt;/p&gt;

&lt;h2&gt;Finding&lt;/h2&gt;

&lt;p&gt;The key to finding LFIs is to look for parameters in web requests that are interacting with files on the system. Some times developers are nice and call the parameter something like page or file which makes life a lot easier. Additionally, any parameter that has a file extension is a good place to have a poke around. Figure 1 shows the Damn Vulnerable Web Application (DVWA) LFI setup which obviously makes it easy for us with the parameter and even the file names to look for.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/LFI-example-before.png&quot; alt=&quot;&amp;quot;DVWA&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 1. DVWA set up for LFI vulnerability&lt;/p&gt;

&lt;p&gt;I have included a list of common vulnerable params on my &lt;a href=&quot;https://github.com/0x221b/Wordlists/blob/master/Attacks/LFI/params.txt&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Exploiting&lt;/h2&gt;

&lt;p&gt;Once a good candidate is found we need a few pieces of information to be able to exploit it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The file we know exists on the system and will be able to read(eg. /etc/passwd on linux)&lt;/li&gt;
  &lt;li&gt;Our likely current working directory, or more specifically how far we are away from /&lt;/li&gt;
  &lt;li&gt;Any filters present&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Although 1 is easy 2 and 3 will take a bit of experimentation. In our linux example its likely we are in /var/www/html but there could be a few folders between us and that. Also there is no guarantee this is the file structure especially if virtual hosting is being used.&lt;/p&gt;

&lt;p&gt;Looking again at DVWA for 1 we will use /etc/passwd as we know its a linux platform. for 2 and 3 we can run a simple wordlist through Burp intruder to see how far we are from the / directory and to see if any filters are in place. by combining two files from this &lt;a href=&quot;https://github.com/tennc/fuzzdb/blob/master/dict/BURP-PayLoad/LFI/&quot;&gt;GitHub repo&lt;/a&gt; one with various encodings of ../../ (dot-slash-PathTraversal_and_LFI_pairing.txt) and one with a few encodings of /etc/passwd (simple-check.txt) we should be able to establish if its vulnerable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/LFI-low.png&quot; alt=&quot;&amp;quot;DVWA&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 2. On Low security we can see that no encoding is needed and we are 5 directories away from /.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/LFI-med.png&quot; alt=&quot;&amp;quot;DVWA&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 3. On Medium security a bit of encoding of the ../ is required for us to read the document.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/LFI-high.png&quot; alt=&quot;&amp;quot;DVWA&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 4. On High it is a bit different no real traversal is needed it just needs to have file:// prefixed to the begining of the file.&lt;/p&gt;

&lt;p&gt;So we have established 1, 2 and 3 from above and we can read /etc/passwd. Now what…&lt;/p&gt;

&lt;h2&gt;Escalating&lt;/h2&gt;

&lt;h3&gt;Interesting Files&lt;/h3&gt;

&lt;p&gt;So you have found an LFI vuln and have read /etc/passwd. But short of what users are on the system and a few limited details we dont know much. One of the main problems with LFI is that you don’t know what you don’t know. So there could be a file in the /opt directory with all the passwords in it but if you don’t know its name you cant go and get it easily with this vuln alone. There are a couple of ways to brute force for the obvious files of interest, assuming you know what OS your target is running (which you definitely should by this point).
The first stop should be this &lt;a href=&quot;https://github.com/tennc/fuzzdb/blob/master/dict/BURP-PayLoad/LFI/LFI_InterestingFiles-NullByteAdded.txt&quot;&gt;GitHub repo&lt;/a&gt; as it includes a list of interesting linux based files to check for. You might get lucky and find a file with some juicy detail that lets you SSH into a box.
This is also where you enumeration comes into play. If you know the exact OS the target is running and the software it has you can do some googling and make it more likely that you will be able to find the files you are looking for.&lt;/p&gt;

&lt;p&gt;To return to our DVWA example from earlier we can see that by running this wordlist through burp we can see if there any other files of interest on the system we can read.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/LFI-files.png&quot; alt=&quot;&amp;quot;DVWA&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 5. We already know the encoding and distances from / so we only need one wordlist this time.&lt;/p&gt;

&lt;p&gt;We get a few files (Anything not of size 3580, most others wont be accessible by www-data user unless the system is poorly configured) which help add a few bits to our enumeration notes but still along way from RCE, ok new plan…&lt;/p&gt;

&lt;p&gt;Once you have learned the users names it is always worth checking /home/username/.ssh/id_rsa to get their private key and use that to ssh onto the system. Failing that you can also check for bash_history etc as you might get lucky on passwords.&lt;/p&gt;

&lt;h3&gt;Log and file poisoning&lt;/h3&gt;

&lt;p&gt;The main aim of this is to somehow get your chosen text onto the system somehow. Once you can get some code (like a php web shell) into a file you can then navigate to it with the LFI and have your very own reverse shell to play with.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enumeration of any log files can show us if any of our inputs such as failed ssh connections, user agents, cookies etc are logged anywhere that we can manipulate to input our own php code. The &lt;a href=&quot;https://github.com/tennc/fuzzdb/blob/master/dict/BURP-PayLoad/LFI/LFI-LogFileCheck.txt&quot;&gt;log files&lt;/a&gt; and &lt;a href=&quot;https://github.com/tennc/fuzzdb/blob/master/dict/BURP-PayLoad/LFI/LFI-FD-check.txt&quot;&gt;fd files&lt;/a&gt;can be discovered from the same GitHub as earlier. The location of cookies etc will depend on the software and require a bit of research to know exactly where to look.&lt;/li&gt;
  &lt;li&gt;Any file upload utilities we can access.&lt;/li&gt;
  &lt;li&gt;Sending system emails to a user we can then read with the LFI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you know you can read these files its just a case of getting text into them. The method will depend on the file so a bit of research may be needed in order to find the correct method. That may be changing your user agent or attempting to log into SSH. then just insert the php code for web shell of you choice access it with the LFI and there you have it RCE over a web shell.&lt;/p&gt;

&lt;h2&gt;Automation&lt;/h2&gt;

&lt;p&gt;The most common tool for automation of LFI discovery is dotdotpwn which can be found on github or installed from the kali repository.&lt;/p&gt;

&lt;h2&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;As with all of these types of techniques these methods should only be used against systems you own or those you have express and written permission of the owner to test. It is illegal to use these techniques on systems in other cases.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Here we have covered a simple methodology for finding, exploiting and escalating LFI to RCE with nothing but Burp Suite and a few wordlists. Hope anyone who came across this article has found it useful.&lt;/p&gt;

&lt;p&gt;Anyone who wants to have a go on DVWA the easiest way I have found is to access it via the site &lt;a href=&quot;https://tryhackme.com&quot;&gt;TryHackMe&lt;/a&gt; which has a DVWA room you can deploy and access in seconds.&lt;/p&gt;

&lt;p&gt;Any comments or questions please contact me on &lt;a href=&quot;https://twitter.com/JonoH904&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;0x221b&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000&quot; data-font-color=&quot;#000&quot; data-coffee-color=&quot;#fff&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/221b.png&quot; alt=&quot;&amp;quot;0x221B&amp;quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>0x221B</name>
        
        
      </author>

      

      
        <category term="Web" />
      

      
        <summary type="html">Local File Inclusion or LFI is a vulnerability in web applications where input can be manipulated to read other files on the system that were not intented to be read by the web server. It occurs when the application accesses a file on the system using input that can be altered by the user. Then it is just a case of finding the right level of back tracks (../) to locate the files of interest. LFI is a useful vulnerability to find but if there are no interesting files on the server there isn’t much you can do with it. Or is there?</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Ghostcat Vulnerability (CVE-2020-1938)</title>
      <link href="http://localhost:4000/Ghostcat-Vulnerability" rel="alternate" type="text/html" title="Ghostcat Vulnerability (CVE-2020-1938)" />
      <published>2020-07-24T00:00:00+01:00</published>
      <updated>2020-07-24T00:00:00+01:00</updated>
      <id>http://localhost:4000/Ghostcat-Vulnerability</id>
      <content type="html" xml:base="http://localhost:4000/Ghostcat-Vulnerability">&lt;p&gt;To continue my theme of better late than never I have a quick write up of the ghost cat vulnerability. Probably old news to most but wanted to get my learning down on “paper” to help me organise my thoughts. I will start with a few definitions and then move on to the POC and remediations. The POC is from the room on Tryhackme.com.&lt;/p&gt;

&lt;h3&gt;Apache Tomcat&lt;/h3&gt;

&lt;p&gt;Tomcat is an Open Source Apache web server written in Java. During its time it has seen its fair share of vulnerabilities. A quick search with searchsploit or on ExploitDB reveals a list of potential weaknesses if the latest version is not installed.&lt;/p&gt;

&lt;h3&gt;Apache Jserv Protocol (AJP)&lt;/h3&gt;

&lt;p&gt;AJP is a protocol that can proxy inbound requests through the web server into the application server behind it. Which already sounds really bad. To make matters worse within the system it has a lot of built in trust. This of course means that it should never be exposed to the internet. Docs on AJPv13 can be found &lt;a href=&quot;https://tomcat.apache.org/connectors-doc-archive/jk2/common/AJPv13.html&quot;&gt;here&lt;/a&gt;. Communication with the servlet is conducted by TCP and once a connection is assigned to a particular request, it will not be used for any others until the request-handling cycle has been terminated. By default this runs on port 8009 so if you see that on a Nmap scan you know what to look for.&lt;/p&gt;

&lt;h3&gt;Ghostcat Vulnerability&lt;/h3&gt;

&lt;p&gt;GhostCat is a local file inclusion (LFI) vulnerability present through the exploitation of the Apache Jserv Protocol. This means it can be exploited to read restricted web app files on the appserver. Where file uploads are allowed this can also lead to remote code execution (Assuming the documents are stored in the document root). It affects all unpatched versions of Apache Tomcat.&lt;/p&gt;

&lt;h3&gt;POC&lt;/h3&gt;

&lt;p&gt;For the POC I am using Tryhackme.com’s new room for the Ghostcat exploit. Rather than fighting with the AJP requests there is a simple tool that can be used to send the required data to exploit the LFI. The tool can be found &lt;a href=&quot;https://github.com/00theway/Ghostcat-CNVD-2020-10487/blob/master/ajpShooter.py&quot;&gt;here&lt;/a&gt;. In the following example we have found a Tomcat web server and after an Nmap scan we have found port 8009 to be open.&lt;/p&gt;

&lt;p&gt;The LFI affects the Webapp server so some googling presents the default folders present in this file structure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WEB-INF(d)(web.xml, classes(d), lib(d))&lt;/li&gt;
  &lt;li&gt;index.jsp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To look through what we have we can check all of these with our AJP shooter with the following command:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;python3 ajpShooter.py http://10.10.10.78:8080 8009 /WEB-INF/web.xml read&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this instance this results in the reading of the restricted file web.xml that results in the information leak of a password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/ajp.png&quot; alt=&quot;&amp;quot;AJP tool&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Remediation&lt;/h3&gt;

&lt;p&gt;Tomcat have since fixed the issue so the best way to protect yourselves is to update!&lt;/p&gt;

&lt;p&gt;Any comments or questions please contact me on twitter at the link at the top of the page.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;0x221b&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000&quot; data-font-color=&quot;#000&quot; data-coffee-color=&quot;#fff&quot;&gt;&lt;/script&gt;

&lt;p&gt;Copied from my old &lt;a href=&quot;https://testofpen.wordpress.com/2020/04/03/ghostcat-vulnerability-cve-2020-1938/&quot;&gt;blog&lt;/a&gt; published 3 April 2020.
&lt;img src=&quot;assets/images/221b.png&quot; alt=&quot;&amp;quot;0x221B&amp;quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>0x221B</name>
        
        
      </author>

      

      
        <category term="CVE" />
      

      
        <summary type="html">To continue my theme of better late than never I have a quick write up of the ghost cat vulnerability. Probably old news to most but wanted to get my learning down on “paper” to help me organise my thoughts. I will start with a few definitions and then move on to the POC and remediations. The POC is from the room on Tryhackme.com.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">OWASP Top 10 OS Command Injection</title>
      <link href="http://localhost:4000/OWASP-Top-10-Command-Injection" rel="alternate" type="text/html" title="OWASP Top 10 OS Command Injection" />
      <published>2020-07-22T00:00:00+01:00</published>
      <updated>2020-07-22T00:00:00+01:00</updated>
      <id>http://localhost:4000/OWASP-Top-10-Command-Injection</id>
      <content type="html" xml:base="http://localhost:4000/OWASP-Top-10-Command-Injection">&lt;p&gt;I have decided to dig a little deeper into the OWASP top 10. I find web security such a vast subject (with new issues being found daily) that instead of chasing around every new issue I come across my time would be better spent getting a better understanding of the OWASP Top 10 first. I have had the chance to set up labs or practice them on hack the box but this will be the first time I consolidate my knowledge in a blog for future reference. I believe this understanding will help me when I explore more niche vulnerabilities in the future. For those new to the subject and not aware of these 10, I list them below. Further details can also be found &lt;a href=&quot;https://owasp.org/www-project-top-ten/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;b&gt;Injection&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;Broken Authentication&lt;/li&gt;
  &lt;li&gt;Sensitive Data Exposure&lt;/li&gt;
  &lt;li&gt;XXE&lt;/li&gt;
  &lt;li&gt;Broken Access Control&lt;/li&gt;
  &lt;li&gt;Security Misconfiguration&lt;/li&gt;
  &lt;li&gt;XSS&lt;/li&gt;
  &lt;li&gt;Insecure Deserialisation&lt;/li&gt;
  &lt;li&gt;Using Components With Known Vulnerabilities&lt;/li&gt;
  &lt;li&gt;Insufficient Logging and Monitoring&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So starting off with this article I shall cover part of the first item on the list. Injection is an umbrella term and covers quite a few web vulnerabilities. For example OS, SQL and LDAP injection. This article will focus on OS command injection.&lt;/p&gt;

&lt;h2&gt;Command Injection&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Impact:&lt;/strong&gt; Critical          &lt;strong&gt;Risk:&lt;/strong&gt; High          &lt;strong&gt;Difficulty:&lt;/strong&gt; Medium to High&lt;/p&gt;

&lt;h3&gt;So what is OS Command Injection?&lt;/h3&gt;

&lt;p&gt;Simply put OS Command Injection is the ability to remotely execute OS commands on a target system. The reason this vulnerability exists is that the web page executes a shell command as part of its functionality and the command injection piggy backs off this to execute commands for the attacker. The classic example of this is a page that lets you ping another IP address. By simply adding a ;ls to the ip the shell that executes the ping sees this as a new command and executes it as well. This is of course an over simplified example and this particular vulnerability is usually far more complicated to pull off. If you do manage to get it however you are a good way to compromising the system, depending on which user you are executing commands as.&lt;/p&gt;

&lt;h3&gt;How do I find OS Command Injection?&lt;/h3&gt;

&lt;p&gt;The first thing to establish is what kind of OS the system is running. This is important as it will let you know what type of commands you can execute. No point trying to execute ls if you are on a Windows system.&lt;/p&gt;

&lt;p&gt;The following areas should be tested for injection possibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;POST request: Body data parameters&lt;/li&gt;
  &lt;li&gt;GET request: Parameters submitted in URL&lt;/li&gt;
  &lt;li&gt;Headers including: Cookies, Referer, X-Forward-For, User Agent, Any custom headers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To test these parameters a good place to start is with the ping command. This allows an attacker to specify the amount of packets sent and thus the delay in the loading of the web page.&lt;/p&gt;

&lt;p&gt;With the options -c in Linux or the -n in Windows will tell ping exactly how many requests we want it to send and these equate to roughly one a second. So if a page loads normally in less than 2 seconds and then we feed it ; ping -c 10 8.8.8.8 if the page takes around 10 seconds instead of two its likely it is vulnerable to command injection. Best to check this kind of thing a few times as speeds can obviously vary.  The following command suggested by &lt;a href=&quot;https://portswigger.net/support/using-burp-to-test-for-os-command-injection-vulnerabilities&quot;&gt;Portswigger&lt;/a&gt; will cause a 10 second delay in Windows and Linux based systems if they are vulnerable and unfiltered:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;|| ping -c 10 127.0.0.1 ; x || ping -n 10 127.0.0.1 &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The main way to test command injection is to append a command to a bit of user submitted data that is used as an argument for an executed command on the system. To do this several symbols can be tested to enable an attacker to append the malicious command to the normal one. Below is a list of symbols that should be tried when trying to execute commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;;&lt;/li&gt;
  &lt;li&gt;|&lt;/li&gt;
  &lt;li&gt;||&lt;/li&gt;
  &lt;li&gt;&amp;amp;&lt;/li&gt;
  &lt;li&gt;&amp;amp;&amp;amp;&lt;/li&gt;
  &lt;li&gt;\n&lt;/li&gt;
  &lt;li&gt;()&lt;/li&gt;
  &lt;li&gt;{}&lt;/li&gt;
  &lt;li&gt;{{}}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On linux you can also try adding `` or $ to execute inline commands. It is also worth noting that it may be needed to break out of ‘ or “ to be able to execute commands. These symbols can also be tested at the end of a line as well as the beginning to see if the results differ. Additionally, as well as appending commands on to expected input it should also be tested by completely replacing the expected command with the malicious one. URL encoding is likely required when submitting and spaces can be filled with either %20 and +.&lt;/p&gt;

&lt;p&gt;If when using the commands and symbols above the page takes the expected time to load (based on the number of ping packets) the next step is to find a way to read the results. One of two things will occur. Either the results of the ping requests will be printed to the page (see Fig 1) or they won’t. If it looks like the ping request worked but nothing prints out then see the What if nothing prints to the screen? section below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/pingid.png&quot; alt=&quot;Command Injection example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fig 1. Example of the command 127.0.0.1 ; id being printed to screen from DVWA&lt;/p&gt;

&lt;p&gt;If the results do print to screen then the echo command is your friend when it comes to testing for command injection. By using echo you can quickly establish whether it is possible to print the output of commands to the page. The command injection can be confirmed with a simple echo random string and see if the random string appears on the screen. It is important to check as there is a possibility of false positives with time delays as it could just be that the page took a bit longer to load due to a networking issue. This is a problem that can occur with some web scanners so confirmation is important. From here, commands such as ls and cat can be used on linux servers to read directories and files and then control of the system is pretty much yours.&lt;/p&gt;

&lt;p&gt;An important step to discovering just how much damage you can do with your command injection is to establish which user you are. On linux this is likely to be www-data and so your abilities will be limited compared to a normal user or even root. But from there it moves on to privilege escalation (if it is in scope). So to establish which user your commands are executed as you can inject the command ‘whoami’ which should provide detail about exactly who you are. The other great thing about this command is that it works for both Linux and Windows servers.&lt;/p&gt;

&lt;h3&gt;What if nothing prints to the screen?&lt;/h3&gt;

&lt;p&gt;In an ideal world (for attackers at least) any command that is executed will immediately print its output to the web page signalling loud and clear that it is indeed vulnerable. This would be achieved with the echo command mentioned earlier. However, this is not always the case and sometimes you won’t see anything but the command will still be executed. This is known as a blind vulnerability. So how can you know if the commands were successful? There are a couple of ways.&lt;/p&gt;

&lt;p&gt;Depending on the situation of course you can use something like Wireshark to confirm the injection. For situations like Hack the Box where you are on the same network by simply starting up Wireshark and executing the ping it will soon show any ICMP packets that have been sent from the target system. This of course means your IP is in all their logs so like I said it depends on the situation. It is also possible to do this over different networks as well using things like ngrok or by setting up a cloud service but these would still fill logs with your IP address which isn’t ideal in most situations but perhaps useful for things like bug bounties. From here a reverse shell can be attempted to gain access to the system (see below).&lt;/p&gt;

&lt;p&gt;A similar but alternative method is to invoke a DNS request using nslookup to a server you control. The site &lt;a href=&quot;https://www.canarytokens.org/&quot;&gt;Canary tokens&lt;/a&gt; is ideal for this kind of request as they will notify you if a connection is made.&lt;/p&gt;

&lt;p&gt;A (slightly) more subtle way of determining if a site is vulnerable to blind command injection is to redirect the output. If you have access via a web app then you are likely in a folder such as /var/www/html/ so by outputting the commands you wish to execute to a folder saved in this directory you should be able to view them on the server. If you were to inject ;ls &amp;gt; ls.txt and then visit target.site/ls.txt, if it were vulnerable it would bring up the file which would list file names of all the pages in that directory giving you a slightly slower but still fully functional command injection. Just make sure you delete it after if you are trying to cover your tracks.&lt;/p&gt;

&lt;h3&gt;Escalation of OS Command Injection&lt;/h3&gt;

&lt;p&gt;As we have control of the system via command injection initial escalation is more for convenience over capability. Using the command injection to add a user, execute a reverse shell or bind a shell to a port is a more convenient way than submitting a new request each time. Especially if it is a blind injection. A list of useful reverse shell commands can be found on &lt;a href=&quot;http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet&quot;&gt;Pentest Monkey&lt;/a&gt;. This will depend on the user you have control of and what they have the rights to do. In some cases www-data will be unable to execute these types of commands and in this case using wget or curl to download a web shell on to the system is a good alternative. There are plenty of php based pages that can be added to the html folder and then accessed allowing a more convenient way to execute commands on the system.&lt;/p&gt;

&lt;p&gt;I have started a document on my &lt;a href=&quot;https://github.com/0x221b/Wordlists/blob/master/Attacks/RevOneLiners.txt&quot;&gt;GitHub&lt;/a&gt; that lists reverse shell one liners that can be used for a quick brute force against with a command injection to see if any of them result in a shell. the list has {IP} instead of an IP and {PORT} instead of a port. These can be replaced with your own with the sed command. syntax below for those who don’t know it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sed -i ‘s/{IP}/192.168.1.1/g’ RevOneLiners.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If it won’t allow any of these in this method then if you save one to a file with the correct IP and Port filled then request it with curl and pipe it to bash to execute it.&lt;/p&gt;

&lt;h3&gt;Bypassing Filters&lt;/h3&gt;
&lt;p&gt;Things are never easy and as such filters are often put in place to blacklist or whitelist certain types of inputs. There are of course ways around these types of things.
A good list of bypasses and tricks can be found on &lt;a href=&quot;https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/Command%20Injection&quot;&gt;payloads all the things&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have created my own master list of command injection payloads with various filter bypasses and injection techniques. These can be found on my &lt;a href=&quot;https://github.com/0x221b/Wordlists/blob/master/Attacks/Command-Injection/CommandInjection.txt&quot;&gt;GitHub&lt;/a&gt;. I also have the linked &lt;a href=&quot;https://github.com/0x221b/Wordlists/blob/master/Attacks/SpaceReplace.txt&quot;&gt;page&lt;/a&gt; that lists alternatives to the space for when it won’t process them. All the GitHub links are a work in progress and will be updated over time.&lt;/p&gt;

&lt;h3&gt;Examples in Hack The Box&lt;/h3&gt;

&lt;p&gt;For those wishing to practice command injection there are example on DVWA and Juice Shop as well as the below retired Hack the Box machines:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Chainsaw&lt;/li&gt;
  &lt;li&gt;Fortune&lt;/li&gt;
  &lt;li&gt;Holiday&lt;/li&gt;
  &lt;li&gt;Remediation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The most obvious way to try to avoid command injection on your site is to not call any system commands from it, especially using user supplied input. If this is unavoidable then enforcing a white list of inputs and validating certain characters is a must.&lt;/p&gt;

&lt;h3&gt;Disclaimer&lt;/h3&gt;

&lt;p&gt;As with all of these types of techniques these methods should only be used against systems you own or those you have express and written permission of the owner to test. It is illegal to use these techniques on systems in other cases.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope this helps some people understand command injection a bit more. I will be adding other OWASP top 10 vulnerability write ups in the future.&lt;/p&gt;

&lt;p&gt;Any comments or questions please contact me on twitter at the link at the top of the page.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.buymeacoffee.com/1.0.0/button.prod.min.js&quot; data-name=&quot;bmc-button&quot; data-slug=&quot;0x221b&quot; data-color=&quot;#FFDD00&quot; data-emoji=&quot;&quot; data-font=&quot;Cookie&quot; data-text=&quot;Buy me a coffee&quot; data-outline-color=&quot;#000&quot; data-font-color=&quot;#000&quot; data-coffee-color=&quot;#fff&quot;&gt;&lt;/script&gt;

&lt;p&gt;Copied from my old &lt;a href=&quot;https://testofpen.wordpress.com/&quot;&gt;blog&lt;/a&gt; published 6 June 2020.
&lt;img src=&quot;assets/images/221b.png&quot; alt=&quot;&amp;quot;0x221B&amp;quot;&quot; /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>0x221B</name>
        
        
      </author>

      

      
        <category term="OWASP" />
      
        <category term="Web" />
      

      
        <summary type="html">I have decided to dig a little deeper into the OWASP top 10. I find web security such a vast subject (with new issues being found daily) that instead of chasing around every new issue I come across my time would be better spent getting a better understanding of the OWASP Top 10 first. I have had the chance to set up labs or practice them on hack the box but this will be the first time I consolidate my knowledge in a blog for future reference. I believe this understanding will help me when I explore more niche vulnerabilities in the future. For those new to the subject and not aware of these 10, I list them below. Further details can also be found here.</summary>
      

      
      
    </entry>
  
</feed>
